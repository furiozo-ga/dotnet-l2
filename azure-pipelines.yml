# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
#  name: p1
  vmImage: ubuntu-latest

#container: node:17-bullseye
#container: node:17-bullseye-slim
#container: node:17-alpine
#container: furiozoga/semantic-release:0.0.1
#container: furiozoga/dotnetsdk:latest

variables:
    buildConfig: Release
    REL_TYP: none
#    REL_VER: 0.0.0

steps:
- checkout: self
  clean: false
  persistCredentials: true

#- bash: echo Hello, world! bash
#  displayName: 'Run a one-line script'

- task: Npm@1
  enabled: false
  inputs:
    command: install

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: false
    arguments: -o dir -c $(buildConfig)
    zipAfterPublish: false
    modifyOutputPath: false

- bash: |
    export TIME=$"command: %C\ttime: %e s\tmem: %M kB\texit code: %x"
    t='command time'
    #which pigz
    #npm install
    $t curl -L https://github.com/Elders/blob/releases/download/SemRel-01/node_modules.tar.gz | tar mx -I pigz
    $t npx semantic-release --no-ci
    #$t curl -L https://github.com/furiozo-ga/dl/releases/download/semrel-001/node_modules.tar.gz | tar mx -I pigz
    $t dotnet --version
    echo ------------- which dotnet --------------
    ls -l /usr/share/dotnet/sdk/
    #$t uname -a
    #$t echo $(System.AccessToken)
    echo "    System.AccessToken=$(System.AccessToken)
        Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)
        Build.Repository.LocalPath=$(Build.Repository.LocalPath)
        `pwd`"
    ls -l ..
    echo ===== mount =====
    mount
    #$t git config -l
    #$t cat .git/config
    #$t cat /etc/issue
    cat /proc/cpuinfo | grep name
    $t free
    $t node -v
    $t npm -v
    $t npx -v
    $t npx semantic-release -v
    $t npm ls
  name: diag1
  displayName: diag1

- task: Bash@3
  displayName: diag2
  inputs:
    failOnStderr: true
    targetType: 'inline'
    script: |
      if [ "x$DIAG1_REL_TYP" = "x" ];then
        echo no new release
        exit 0
      fi
      echo type=$DIAG1_REL_TYP
      echo version=$DIAG1_REL_VER
      ls -l dir
      set


- bash: |
    echo "typ $(diag1.REL_TYP)   ver $(diag1.REL_VER)   last $(diag1.LAST_VER)"
  condition: and(eq(variables['diag1.REL_TYP'], ''), succeeded())
  failOnStderr: false
  name: norel

- bash: |
    echo "typ $(diag1.REL_TYP)   ver $(diag1.REL_VER)   last $(diag1.LAST_VER)"
  condition: and(ne(variables['diag1.REL_TYP'], ''), succeeded())
  failOnStderr: true
  name: somerel

- bash: |
    echo "typ $(diag1.REL_TYP)   ver $(diag1.REL_VER)"
  condition: and(eq(variables['diag1.REL_TYP'], 'patch'), succeeded())
  name: patch

- bash: |
    echo "typ $(diag1.REL_TYP)   ver 
  condition: and(eq(variables['diag1.REL_TYP'], 'minor'), succeeded())
  name: minor

- bash: |
    echo "typ $(diag1.REL_TYP)   ver $(diag1.REL_VER)"
  condition: and(eq(variables['diag1.REL_TYP'], 'major'), succeeded())
  name: major

- task: Docker@2
  inputs:
    containerRegistry: 'docker.io/furiozoga'
    repository: 'furiozoga/l2'
    command: 'buildAndPush'
    Dockerfile: 'dockerfile'
    tags: |
      $(Build.BuildId)
      $(diag1.REL_VER)"

#- ${{ if eq( variables['diag1.REL_TYP'] ,'') }}:
#  - bash: echo "rel no release $(diag1.REL_TYP)"
#- ${{ elseif eq( variables['diag1.REL_TYP'] ,'patch') }}:
#  - bash: echo "rel $(diag1.REL_TYP)   ver $(diag1.REL_VER)"
#- ${{ else }}:
#  - bash: echo "unknown release type rel $(diag1.REL_TYP)   ver $(diag1.REL_VER)"
